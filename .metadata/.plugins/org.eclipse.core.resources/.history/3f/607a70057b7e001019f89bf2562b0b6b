package com.jb.service;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.jb.entity.Recipe;
import com.jb.repository.RecipeRepository;

import jakarta.annotation.PostConstruct;

@Service
public class RecipeService {

    private static final Logger logger = LoggerFactory.getLogger(RecipeService.class);

    @Autowired
    private RecipeRepository recipeRepository;

    @PostConstruct
    public void loadRecipes() {
        try {
            // Configure ObjectMapper to allow NaN
            ObjectMapper mapper = JsonMapper.builder()
                    .enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS)
                    .build();
            File file = new File("C:/Users/JYOTI/Downloads/US_recipes.json");

            // Read JSON as a Map to inspect structure
            Map<String, Object> jsonMap = mapper.readValue(file, new TypeReference<Map<String, Object>>() {});
            logger.info("JSON top-level keys: {}", jsonMap.keySet());

            List<Recipe> recipes;
            // Try common keys for recipe array
            String[] possibleKeys = {"recipes", "data", "items"}; // Add more keys if needed
            boolean found = false;
            for (String key : possibleKeys) {
                if (jsonMap.containsKey(key)) {
                    recipes = mapper.convertValue(jsonMap.get(key), new TypeReference<List<Recipe>>() {});
                    found = true;
                    logger.info("Found recipe array under key: {}", key);
                    break;
                }
            }

            if (!found) {
                throw new RuntimeException("No recognizable recipe array found in JSON. Expected keys: " + String.join(", ", possibleKeys));
            }

            for (Recipe recipe : recipes) {
                if (recipe.getRating() != null && (recipe.getRating().isNaN() || recipe.getRating().isInfinite())) {
                    recipe.setRating(null);
                }
                if (recipe.getPrepTime() != null && recipe.getPrepTime() < 0) {
                    recipe.setPrepTime(null);
                }
                if (recipe.getCookTime() != null && recipe.getCookTime() < 0) {
                    recipe.setCookTime(null);
                }
                if (recipe.getTotalTime() != null && recipe.getTotalTime() < 0) {
                    recipe.setTotalTime(null);
                }
                if (recipe.getNutrients() == null) {
                    recipe.setNutrients("{}");
                } else {
                    try {
                        mapper.readValue(recipe.getNutrients(), new TypeReference<Map<String, String>>() {});
                    } catch (Exception e) {
                        logger.warn("Invalid nutrients JSON for recipe '{}', setting to empty", recipe.getTitle());
                        recipe.setNutrients("{}");
                    }
                }
            }

            recipeRepository.saveAll(recipes);
            logger.info("Successfully loaded {} recipes", recipes.size());
        } catch (Exception e) {
            logger.error("Failed to load recipes from JSON file", e);
            throw new RuntimeException("Failed to load recipes", e);
        }
    }

    public Page<Recipe> getAllRecipes(int page, int limit) {
        Pageable pageable = PageRequest.of(page - 1, limit, Sort.by("rating").descending());
        return recipeRepository.findAll(pageable);
    }

    public Page<Recipe> searchRecipes(String title, String cuisine, Float minRating, Float maxRating,
                                      Integer maxTotalTime, Float maxCalories, int page, int limit) {
        Pageable pageable = PageRequest.of(page - 1, limit, Sort.by("rating").descending());
        return recipeRepository.searchRecipes(title, cuisine, minRating, maxRating, maxTotalTime, maxCalories, pageable);
    }
}