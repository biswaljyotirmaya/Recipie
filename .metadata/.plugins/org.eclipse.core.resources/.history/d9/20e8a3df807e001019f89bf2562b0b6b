package com.jb.service;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.jb.entity.Recipe;
import com.jb.repository.RecipeRepository;

import jakarta.annotation.PostConstruct;

@Service
public class RecipeService {

    private static final Logger logger = LoggerFactory.getLogger(RecipeService.class);

    @Autowired
    private RecipeRepository recipeRepository;

    @Autowired
    private MongoTemplate mongoTemplate;

    @PostConstruct
    public void loadRecipes() {
        try (InputStream is = getClass().getResourceAsStream("/US_recipes.json")) {
            if (is == null) {
                logger.warn("recipes JSON file not found!");
                return; // skip loading
            }

            ObjectMapper mapper = JsonMapper.builder()
                    .enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS)
                    .build();

            Map<String, Object> jsonMap = mapper.readValue(is, new TypeReference<Map<String, Object>>() {});

            List<Recipe> recipes = mapper.convertValue(jsonMap.get("recipes"), new TypeReference<List<Recipe>>() {});
            if (recipes == null || recipes.isEmpty()) {
                logger.warn("No recipes found in JSON!");
                return;
            }

            recipeRepository.saveAll(recipes);
            logger.info("Loaded {} recipes successfully", recipes.size());

        } catch (Exception e) {
            logger.error("Error loading recipes", e);
        }
    }


    public Page<Recipe> getAllRecipes(int page, int limit) {
        Pageable pageable = PageRequest.of(page - 1, limit, Sort.by("rating").descending());
        return recipeRepository.findAll(pageable);
    }

    public Page<Recipe> searchRecipes(String title, String cuisine, Float minRating, Float maxRating,
                                      Integer maxTotalTime, Float maxCalories, int page, int limit) {
        Query query = new Query();
        if (title != null && !title.isEmpty()) {
            query.addCriteria(Criteria.where("title").regex(title, "i"));
        }
        if (cuisine != null && !cuisine.isEmpty()) {
            query.addCriteria(Criteria.where("cuisine").is(cuisine));
        }
        if (minRating != null) {
            query.addCriteria(Criteria.where("rating").gte(minRating));
        }
        if (maxRating != null) {
            query.addCriteria(Criteria.where("rating").lte(maxRating));
        }
        if (maxTotalTime != null) {
            query.addCriteria(Criteria.where("total_time").lte(maxTotalTime));
        }
        if (maxCalories != null) {
            query.addCriteria(Criteria.where("calories").lte(maxCalories));
        }

        long total = mongoTemplate.count(query, Recipe.class);
        Pageable pageable = PageRequest.of(page - 1, limit, Sort.by("rating").descending());
        query.with(pageable);
        List<Recipe> content = mongoTemplate.find(query, Recipe.class);

        return new PageImpl<>(content, pageable, total);
    }
}